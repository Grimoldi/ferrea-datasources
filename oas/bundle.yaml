openapi: 3.0.0
info:
  title: Datasourcers API
  description: |
    # Ferrea Datasource
    This microservice expose an API that allows external datasources to be integrated with Ferrea.
    Given an ISBN, it gather information from multiple source, in order to import them in the application.
  version: 1.0.0
  contact:
    name: Eugenio Grimoldi
    url: https://github.com/Grimoldi/ferrea-datasources
  license:
    name: MIT licence
    url: https://mit-license.org/
servers:
  - url: https://ferrea.local
    description: Development local server
  - url: http://localhost:8080
    description: Client tests
tags:
  - name: books
    description: Book related operations.
  - name: probes
    description: internal probes.
paths:
  /api/v1/books/{isbn}:
    parameters:
      - in: path
        name: isbn
        required: true
        schema:
          type: string
        examples:
          Identity:
            value: 60930314
            summary: Identity, by Milan Kundera.
          theEyeOfTheWorld:
            value: 812511816
            summary: The Eye of the World, by Robert Jordan.
          definitelyNotAnISBN:
            value: 1234567890
            summary: an ISBN for no valid book.
    get:
      description: Search data externally for a single book.
      security: []
      summary: Returns the data found on the external datasources for a specific book, idetified by its ISBN.
      tags:
        - book
      operationId: getBookDatasource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDatasource'
              examples:
                Identity:
                  value:
                    items: 1
                    result:
                      - title: Identity
                        authors:
                          - Milan Kundera
                        publishing: Harper Perennial
                        published_on: 1999
                        cover: https://covers.openlibrary.org/b/id/40647-M.jpg
                        plot: |
                          "A hotel in a small town on the Normandy coast, which they found in a guidebook."
                        languages:
                          - eng
                        book_formats:
                          - edition
                        authors_portrait:
                          - https://covers.openlibrary.org/a/olid/OL4326321A-M.jpg
                theEyeOfTheWorld:
                  value:
                    items: 1
                    result:
                      - title: The Eye of the World (The Wheel of Time, Book 1)
                        authors:
                          - Robert Jordan
                        publishing: Tor Fantasy
                        published_on: 1990
                        cover: https://covers.openlibrary.org/b/id/603208-M.jpg
                        plot: null
                        languages:
                          - eng
                        book_formats:
                          - edition
                        authors_portrait:
                          - https://covers.openlibrary.org/a/olid/OL233594A-M.jpg
                definitelyNotAnISBN:
                  value:
                    items: 0
                    result: []
  /_/health:
    get:
      description: Verify the webserver's dependencies health.
      security: []
      summary: Returns if the webserver is able to engage on its dependencies or not.
      tags:
        - probe
      operationId: getLivenessProbe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
              example:
                status: healthy
                entities:
                  - name: GoogleBooks
                    status: healthy
                  - name: OpenLibrary
                    status: healthy
        '503':
          description: Service unavailable. At least one of its dependencies is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
              example:
                status: unhealthy
                entities:
                  - name: GoogleBooks
                    status: unhealthy
                  - name: OpenLibrary
                    status: healthy
  /_/ready:
    get:
      description: Verify the webserver health.
      security: []
      summary: Returns if the webserver is healthy or not.
      tags:
        - probe
      operationId: getHealthProbe
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
              example:
                status: healthy
                entities:
                  - name: webserver
                    status: healthy
        '503':
          description: Service unavailable. The webserver is not started yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Probe'
components:
  schemas:
    BookDatasource:
      type: object
      properties:
        items:
          type: integer
          minimum: 0
        result:
          type: array
          minItems: 0
          items:
            type: object
            properties:
              title:
                type: string
              authors:
                type: array
                items:
                  type: string
              publishing:
                type: string
              published_on:
                type: integer
                minimum: 0
              cover:
                type: string
                format: uri
              plot:
                type: string
                nullable: true
              languages:
                type: array
                items:
                  type: string
              book_formats:
                type: array
                items:
                  type: string
              authors_portrait:
                type: array
                items:
                  type: string
                  format: uri
    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              loc:
                type: array
                items:
                  type: string
              msg:
                type: string
              input:
                type: string
                nullable: true
            required:
              - type
              - loc
              - msg
              - input
      required:
        - detail
      additionalProperties: false
    Probe:
      type: object
      required:
        - status
        - entities
      properties:
        status:
          type: string
          enum:
            - healthy
            - unhealthy
        entities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
                enum:
                  - healthy
                  - unhealthy
            required:
              - name
              - status
